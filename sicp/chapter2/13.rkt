#lang sicp

(#%require rackunit)

(define (make-interval a b) (cons a b))
(define (lower-bound i) (car i))
(define (upper-bound i) (cdr i))
(define (print-interval i)
  (display "[")
  (display (car i))
  (display " - ")
  (display (cdr i))
  (display "]")
  (newline))

(define (mul-interval i1 i2)
  (let ((p1 (* (lower-bound i1) (lower-bound i2)))
        (p2 (* (lower-bound i1) (upper-bound i2)))
        (p3 (* (upper-bound i1) (lower-bound i2)))
        (p4 (* (upper-bound i1) (upper-bound i2))))
    (make-interval (min p1 p2 p3 p4)
                   (max p1 p2 p3 p4))))

(define (make-center-width c w)
  (make-interval (- c w) (+ c w)))
(define (center i)
  (/ (+ (lower-bound i) (upper-bound i)) 2))
(define (width i)
  (/ (- (upper-bound i) (lower-bound i)) 2))
(define (make-center-percent c p)
   (make-center-width c (* c (/ p 100.0))))
(define (percent i) (* (/ (width i) (center i)) 100.0))

(define interval-1 (make-center-percent 9.5 4))
(define interval-2 (make-center-percent 2.2 3))
(define interval-3 (mul-interval interval-1 interval-2))

(display (percent interval-1))
(newline)
(display (percent interval-2))
(newline)
(display (percent interval-3))
(newline)
(display (+ (percent interval-1) (percent interval-2)))
