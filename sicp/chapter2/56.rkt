#lang sicp

(#%require rackunit)

(define (=number? exp num)
  (and (number? exp) (= exp num)))
(define (power base exp)
  (* exp (* base (log exp))))

(define (variable? x) (symbol? x))
(define (same-variable? v1 v2)
  (and (variable? v1) (variable? v2) (eq? v1 v2)))

(define (make-sum a1 a2)
  (cond ((=number? a1 0) a2)
        ((=number? a2 0) a1)
        ((and (number? a1) (number? a2)) (+ a1 a2))
        (else (list '+ a1 a2))))
  
(define (sum? exp)
  (and (pair? exp) (eq? (car exp) '+)))
(define (addend s)
  (cadr s))
(define (augend s)
  (caddr s))

(define (make-product m1 m2)
  (cond ((or (=number? m1 0) (=number? m2 0)) 0)
        ((=number? m1 1) m2)
        ((=number? m2 1) m1)
        ((and (number? m1) (number? m2)) (* m1 m2))
        (else (list '* m1 m2))))

(define (product? exp)
  (and (pair? exp) (eq? (car exp) '*)))
(define (multiplier p)
  (cadr p))
(define (multiplicand p)
  (caddr p))

(define (make-exponention base exp)
  (cond ((=number? exp 0) 1)
        ((=number? exp 1) base)
        ((and (number? exp) (number? base)) (power base exp))
        (else (list '** base exp))))
(define (exponention? exp)
  (and (pair? exp) (eq? (car exp) '**)))
(define (base exp)
  (cadr exp))
(define (exponent exp)
  (caddr exp))

(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp)
         (if (same-variable? exp var) 1 0))
        ((sum? exp)
         (make-sum (deriv (addend exp) var)
                   (deriv (augend exp) var)))
        ((product? exp)
         (make-sum (make-product (multiplier exp)
                                 (deriv (multiplicand exp) var))
                   (make-product (multiplicand exp)
                                 (deriv (multiplier exp) var))))
        ((exponention? exp)
         (make-product (make-product (exponent exp)
                                     (make-exponention (base exp)
                                                       (- (exponent exp) 1)))
                       (deriv (base exp) var)))
        (else (error "unknown expression type -- DERIV" exp))))

(check-equal? (deriv '(+ (** x 2) x 5) 'x) '(+ (* 2 x) 1))
(check-equal? (deriv '(+ (** x 5) (* 3 (** x 2)) 5) 'x) '(+ (* 5 (** x 4)) (* 3 (* 2 x))))
