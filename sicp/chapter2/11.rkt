#lang sicp

(#%require rackunit)

(define (make-interval a b) (cons a b))
(define (lower-bound interval) (car interval))
(define (upper-bound interval) (cdr interval))
(define (print-interval interval)
  (display "[")
  (display (car interval))
  (display " - ")
  (display (cdr interval))
  (display "]")
  (newline))

(define (mul-interval i1 i2)
  (define (same-sign? x y)
    (or (and (> x 0) (> y 0))
        (and (< x 0) (< y 0))))
  (if (and (same-sign? (lower-bound i1) (upper-bound i1))
           (same-sign? (lower-bound i2) (upper-bound i2)))
      (let ((p1 (* (lower-bound i1) (lower-bound i2)))
            (p2 (* (upper-bound i1) (upper-bound i2))))
        (make-interval (min p1 p2)
                       (max p1 p2)))
  (let ((p1 (* (lower-bound i1) (lower-bound i2)))
        (p2 (* (lower-bound i1) (upper-bound i2)))
        (p3 (* (upper-bound i1) (lower-bound i2)))
        (p4 (* (upper-bound i1) (upper-bound i2))))
    (make-interval (min p1 p2 p3 p4)
                   (max p1 p2 p3 p4)))))

(define interval-1 (make-interval 2.5 -5.0))
(define interval-2 (make-interval 1.0 -2.0))
(define interval-3 (mul-interval interval-1 interval-2))

(check-equal? (lower-bound interval-3) -5.0)
(check-equal? (upper-bound interval-3) 10.0)

(define interval-4 (make-interval -2.5 -5.0))
(define interval-5 (make-interval 1.0 2.0))
(define interval-6 (mul-interval interval-4 interval-5))

(check-equal? (lower-bound interval-6) -10.0)
(check-equal? (upper-bound interval-6) -2.5)
